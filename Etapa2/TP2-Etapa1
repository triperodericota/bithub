
PARTE 2

5)
//CREACIÓN DE LA DB
> use airbdb;

//INSERCIÓN NUEVO DOCUMENTO
> db.apartments.insert({name:'Apartment with 2 bedrooms',capacity:4});

// > db.apartments.find().pretty(); -> están los atributos insertados sumado al campo _id generado por mongo, con el ObjectId

6)
//AGREGAR VARIOS DOCUMENTOS
> db.apartments.insertMany([ {name:'New Apartment', capacity:3, services: ['wifi', 'ac']}, {name:'Nice apt for 6', capacity:6, services: ['parking']}, {name:'1950s Apartment', capacity:3}, {name:'Duplex Floor', capacity:4, services: ['wifi', 'breakfast', 'laundry']}]);

//CONSULTAS
//Consulta de departamentos con capacidad de 3 personas:
> db.apartments.find({capacity:3}).pretty()

//Consulta de departamentos con capacidad de 4 personas o más:
> db.apartments.find({capacity:{$gte:4}}).pretty()

//Consulta para obtener los departamentos con servicio de Wifi:
> db.apartments.find({ services: { $in: [ 'wifi' ]}}).pretty()

//Consulta para obtener los departamentos que tienen la palabra “Apartment” en su nombre:
> db.apartments.find({ name: { $regex: /Apartment/ }}).pretty()

//Consulta para obtener los departamentos que tienen la palabra “Apartment” en su nombre y con capacidad mayor a 3 personas:
> db.apartments.find({ name: { $regex: /Apartment/ }, capacity:{$gt:3}}).pretty()

//Consulta para obtener los departamentos que no tienen ningún servicio:
> db.apartments.find({ services: {$exists:false} }) .pretty()

//Consulta para obtener los departamentos que no tienen ningún servicio, imprimiendo solo los nombres:
> db.apartments.find({ services: {$exists:false} }, {name:2,_id:0} ).pretty()

7)
//Consulta para modificar la capacidad del departamento llamado ‘Duplex Floor’:
> db.apartments.updateOne({name: 'Duplex Floor'},{ $set: { capacity:5 }})

8)
//Consulta para agregar a los servicios del departamento ‘Nice for apt 6’, ‘laundry’:
> db.apartments.update({name: 'Nice apt for 6'},{$push: {services:'laundry'}})

9)
//Consulta para incrementar en 1 a las capacidades de todos los departamentos que tengan Wifi:
> db.apartments.updateMany({services: {$in: ['wifi']}},{$inc: {'capacity':1}})

PARTE 3

Comando para borrar todo el contenido de la colección Apartments:
> db.apartments.remove({})

10) //Si, la colección Apartments tiene el índice “_id” definido. Ese índice se crea automáticamente al crear la colección.
> db.apartments.getIndexes();

11) //Crear indice:
> db.apartments.createIndex({name:1})

//Comando que devuelve todos los departamentos que contienen el valor 11 en su nombre:
> db.apartments.find({name:{$regex: /11/}}).explain('executionStats')

12) Consulta para obtener los departamentos que se encuentren en Londres:
> db.apartments.find({location:{$geoWithin:{$geometry: geojson} }}).explain('executionStats')


PARTE 4
13) // Obtener 5 departamentos aleatorios
> db.reservations.aggregate([ { $group: { _id: "$apartmentName" }} , { $sample: { size: 5}}]);

14) // Departamentos que están a 15km o menos del centro de la ciudad de Londres
> db.apartments.aggregate([{ $geoNear: { near: { type: "Point", coordinates: [-0.127718, 51.507451] }, distanceField: "dist.calculated", maxDistance: 15000, spherical: true }} , { $out: "londonCenterApartments" }]);

15) //Para cada departamento de londonCenterApartments obtener una colección con cada departamento agregando un atributo reservas que contenga un array con todas las reservas
> db.londonCenterApartments.aggregate([ { $lookup: { from: "reservations", localField: "name", foreignField: "apartmentName", as: "reservations" } , { $out: "londonCenterApartmentsWithReservations" }}]);

16)
> db.londonCenterApartmentsWithReservations.aggregate([ { $unwind: { path: "$reservations", preserveNullAndEmptyArrays: true }} ,
{ $project: {"name": 1, "reservations.amount": 1 }},
{ $group: {_id: "$name", numberOfeservations: {$sum: 1 - 1}, averageAmount: {$avg: "$reservations.amount"} }}
])



